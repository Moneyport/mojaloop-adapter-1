import { AxiosInstance } from 'axios'
import Knex from 'knex'
import { Party, PartyIdInfo, Money, TransactionType, AuthorizationsIDPutResponse } from '../types/mojaloop'

export type Transaction = {
  transactionRequestId: string; // UUID generated by the adaptor for the Mojaloop transactionRequest
  transactionId?: string; // UUID generated by the Payer FSP
  payee: Party;
  payer: PartyIdInfo;
  lpsId: string;
  lpsKey: string;
  lpsFee: Money;
  state: string;
  amount: Money;
  transactionType: TransactionType;
  authenticationType?: 'OTP' | 'QRCODE' | undefined;
  expiration?: string;
}
export interface AuthorizationsService {
  sendAuthorizationsResponse (transactionRequestId: string, response: AuthorizationsIDPutResponse, headers: { [k: string]: string }): Promise<void>;
}

export class KnexAuthorizationsService implements AuthorizationsService {
  constructor (private _knex: Knex, private _client: AxiosInstance) {
  }

  async sendAuthorizationsResponse (transactionRequestId: string, request: AuthorizationsIDPutResponse, headers: { [k: string]: string }): Promise<void> {
    try {
      await this._client.put(`/authorizations/${transactionRequestId}`, request, { headers })
    } catch (error) {

    }

  }
}
